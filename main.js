(()=>{"use strict";function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var e=function(){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),this._url=t.url,this._headers=t.headers}var r,n;return r=e,(n=[{key:"getInitialCards",value:function(){return fetch("".concat(this._url,"cards"),{headers:this._headers}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status))}))}},{key:"getProfile",value:function(){return fetch("".concat(this._url,"users/me"),{headers:this._headers}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status))}))}},{key:"getAllData",value:function(){return Promise.all([this.getInitialCards(),this.getProfile()])}},{key:"saveProfile",value:function(t){var e=t.name,r=t.about;return fetch("".concat(this._url,"users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:r})}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status))}))}},{key:"saveAvatar",value:function(t){var e=t.avatar;return fetch("".concat(this._url,"users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status))}))}},{key:"addCard",value:function(t){var e=t.name,r=t.link;return fetch("".concat(this._url,"cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:r})}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status))}))}},{key:"removeCard",value:function(t){return fetch("".concat(this._url,"cards/").concat(t),{method:"DELETE",headers:this._headers}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status))}))}},{key:"addLikeCard",value:function(t){return fetch("".concat(this._url,"cards/").concat(t,"/likes"),{method:"PUT",headers:this._headers}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status))}))}},{key:"removeLikeCard",value:function(t){return fetch("".concat(this._url,"cards/").concat(t,"/likes"),{method:"DELETE",headers:this._headers}).then((function(t){return t.ok?t.json():Promise.reject("Ошибка: ".concat(t.status))}))}}])&&t(r.prototype,n),Object.defineProperty(r,"prototype",{writable:!1}),e}();function r(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var n=function(){function t(e,r){var n=e.items,o=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._renderedItems=n,this._renderer=o,this._container=document.querySelector(r)}var e,n;return e=t,(n=[{key:"addItem",value:function(t){this._container.prepend(t)}},{key:"renderItems",value:function(){var t=this;this._renderedItems.forEach((function(e){t._renderer(e)}))}}])&&r(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function o(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var i=function(){function t(e,r){var n=e.card,o=e.handleCardClick,i=e.handleLikeCard,a=e.handleTrashCard;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._card=n,this._cardSelector=r,this._handleCardClick=o,this._handleLikeCard=i,this._handleTrashCard=a}var e,r;return e=t,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._cardPhoto=this._element.querySelector(".card__photo"),this._cardButtonLike=this._element.querySelector(".card__button-like"),this._cardLikes=this._element.querySelector(".card__likes"),this._cardButtonTrash=this._element.querySelector(".card__button-trash"),this._cardTitle=this._element.querySelector(".card__title"),this._setEventListeners(),this._cardTitle.textContent=this._card.name,this._cardPhoto.src=this._card.link,this._cardPhoto.alt=this._card.name,this._card.own&&this._cardButtonTrash.classList.remove("card__button-trash__hidden"),this._showCardOwnLike(),this._showCardLikes(),this._element}},{key:"_setEventListeners",value:function(){var t=this;this._cardPhoto.addEventListener("click",(function(){return t._handleCardClick(t._card)})),this._cardButtonLike.addEventListener("click",(function(){return t._handleLikeCard(t._card)})),this._cardButtonTrash.addEventListener("click",(function(){return t._handleTrashCard(t._card)}))}},{key:"_getOwnLike",value:function(){return this._card.ownLike}},{key:"_setOwnLike",value:function(t){this._card.ownLike=t}},{key:"_setLikes",value:function(t){this._card.likes=t}},{key:"_showCardOwnLike",value:function(){this._card.ownLike?this._cardButtonLike.classList.add("card__button-like_active"):this._cardButtonLike.classList.remove("card__button-like_active")}},{key:"_showCardLikes",value:function(){this._cardLikes.textContent=this._card.likes.length}},{key:"_showLikeStatus",value:function(t,e){this._setLikes(t),this._setOwnLike(e),this._showCardLikes(),this._showCardOwnLike()}},{key:"_trashCard",value:function(){this._element.remove(),this._element=null}}])&&o(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function a(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var c=function(){function t(e){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._popupSelector=e,this._popup=document.querySelector(e),this._handleEscCloseBinded=function(t){return r._handleEscClose(t)}}var e,r;return e=t,(r=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscCloseBinded)}},{key:"close",value:function(){document.removeEventListener("keydown",this._handleEscCloseBinded),this._popup.classList.remove("popup_opened")}},{key:"_handleClickPopup",value:function(t){(t.target===t.currentTarget||t.target.classList.contains("popup__button-close"))&&this.close()}},{key:"_handleEscClose",value:function(t){"Escape"===t.key&&this.close()}},{key:"setEventListeners",value:function(){var t=this;this._popup.addEventListener("click",(function(e){return t._handleClickPopup(e)}))}}])&&a(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function l(){return l="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=f(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},l.apply(this,arguments)}function f(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=d(t)););return t}function h(t,e){return h=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},h(t,e)}function p(t,e){if(e&&("object"===u(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function d(t){return d=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},d(t)}var _=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&h(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=d(n);if(o){var r=d(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return p(this,t)});function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,t))._imagePhoto=e._popup.querySelector(".image-popup__photo"),e._imageTitle=e._popup.querySelector(".image-popup__title"),e}return e=a,(r=[{key:"open",value:function(t){this._imagePhoto.src=t.link,this._imagePhoto.alt=t.name,this._imageTitle.textContent=t.name,l(d(a.prototype),"open",this).call(this)}}])&&s(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),a}(c);function y(t){return y="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},y(t)}function v(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function m(){return m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=b(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},m.apply(this,arguments)}function b(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=g(t)););return t}function k(t,e){return k=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},k(t,e)}function w(t,e){if(e&&("object"===y(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function g(t){return g=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},g(t)}var E=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&k(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=g(n);if(o){var r=g(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return w(this,t)});function a(t,e){var r;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(r=i.call(this,t))._form=r._popup.querySelector(".form"),r._handleFormSubmit=e,r._inputList=r._form.querySelectorAll(".form__input"),r}return e=a,(r=[{key:"_getInputValues",value:function(){var t={};return this._inputList.forEach((function(e){t[e.name]=e.value})),t}},{key:"close",value:function(){m(g(a.prototype),"close",this).call(this),this._form.reset()}},{key:"setEventListeners",value:function(){var t=this;this._form.addEventListener("submit",(function(e){e.preventDefault(),t._handleFormSubmit(t._getInputValues())})),m(g(a.prototype),"setEventListeners",this).call(this)}}])&&v(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),a}(c);function S(t){return S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},S(t)}function C(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function L(){return L="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,r){var n=O(t,e);if(n){var o=Object.getOwnPropertyDescriptor(n,e);return o.get?o.get.call(arguments.length<3?t:r):o.value}},L.apply(this,arguments)}function O(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=T(t)););return t}function j(t,e){return j=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},j(t,e)}function P(t,e){if(e&&("object"===S(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t)}function T(t){return T=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},T(t)}var q=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&j(t,e)}(a,t);var e,r,n,o,i=(n=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=T(n);if(o){var r=T(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return P(this,t)});function a(t){var e;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,a),(e=i.call(this,t))._form=e._popup.querySelector(".form"),e}return e=a,(r=[{key:"setHandleSubmit",value:function(t){this._handleSubmit=t}},{key:"setEventListeners",value:function(){var t=this;this._form.addEventListener("submit",(function(e){e.preventDefault(),"function"==typeof t._handleSubmit&&t._handleSubmit()})),L(T(a.prototype),"setEventListeners",this).call(this)}}])&&C(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),a}(c);function B(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var I=function(){function t(e,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._form=r,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._visibleErrorClass=e.visibleErrorClass}var e,r;return e=t,(r=[{key:"enableValidation",value:function(){var t=this;this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._buttonElement=this._form.querySelector(this._submitButtonSelector),this._form.addEventListener("input",(function(e){return t._handleFormInput(e)}))}},{key:"_handleFormInput",value:function(t){this._isValid(t.target),this.toggleButtonState()}},{key:"_isValid",value:function(t){var e=this._form.querySelector(".".concat(this._errorClass,"_field_").concat(t.id));t.validity.valid?this._hideInputError(t,e):this._showInputError(t,e,t.validationMessage)}},{key:"_showInputError",value:function(t,e,r){t.classList.add(this._inputErrorClass),e.textContent=r,e.classList.add(this._visibleErrorClass)}},{key:"_hideInputError",value:function(t,e){e.classList.remove(this._visibleErrorClass),e.textContent="",t.classList.remove(this._inputErrorClass)}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(t){return!t.validity.valid}))}},{key:"toggleButtonState",value:function(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButtonClass),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._inactiveButtonClass),this._buttonElement.removeAttribute("disabled"))}},{key:"hideFormErrors",value:function(){var t=this;this._inputList.forEach((function(e){var r=t._form.querySelector(".".concat(t._errorClass,"_field_").concat(e.id));t._hideInputError(e,r)}))}}])&&B(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}();function R(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var x=function(){function t(e){var r=e.titleSelector,n=e.aboutSelector,o=e.avatarSelector;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._titleElement=document.querySelector(r),this._aboutElement=document.querySelector(n),this._avatarElement=document.querySelector(o)}var e,r;return e=t,(r=[{key:"getUserInfo",value:function(){return{name:this._titleElement.textContent,about:this._aboutElement.textContent}}},{key:"setUserInfo",value:function(t){var e=t.name,r=t.about;this._titleElement.textContent=e,this._aboutElement.textContent=r,this._avatarElement.alt=e}},{key:"getAvatar",value:function(){return this._avatarElement.src}},{key:"setAvatar",value:function(t){this._avatarElement.src=t}}])&&R(e.prototype,r),Object.defineProperty(e,"prototype",{writable:!1}),t}(),A={inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input-error",visibleErrorClass:"form__input-error_visible"},D={defaultText:"Сохранить",notifyText:"Сохранение..."},F={defaultText:"Создать",notifyText:"Сохранение..."},V=document.querySelector(".profile__avatar"),U=document.querySelector(".profile__edit"),H=document.querySelector(".profile__add-mesto"),N=document.querySelector(".avatar-form"),J=document.querySelector(".profile-form"),M=document.querySelector(".card-form"),z=N.querySelector(".form__input_field_avatar-href"),$=J.querySelector(".form__input_field_profile-name"),G=J.querySelector(".form__input_field_profile-about");function K(t,e,r){var n=e.defaultText,o=e.notifyText;document.querySelector(t).textContent=r?o:n}function Q(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}var W=new x({titleSelector:".profile__title",aboutSelector:".profile__about",avatarSelector:".profile__avatar-image"}),X=new _(".popup_type_image"),Y=new E(".popup_type_profile",(function(t){K(".profile-form .form__button-save",D,!0),ct.saveProfile(t).then((function(t){W.setUserInfo(t),Y.close()})).catch((function(t){console.log(t)})).finally((function(){K(".profile-form .form__button-save",D,!1)}))})),Z=new E(".popup_type_avatar",(function(t){K(".avatar-form .form__button-save",D,!0),ct.saveAvatar(t).then((function(t){W.setAvatar(t.avatar),Z.close()})).catch((function(t){console.log(t)})).finally((function(){K(".avatar-form .form__button-save",D,!1)}))})),tt=new q(".popup_type_card-remove"),et=new I(A,M),rt=new I(A,J),nt=new I(A,N),ot=function(){z.value=W.getAvatar(),nt.hideFormErrors(),nt.toggleButtonState(),Z.open()},it=function(){var t=W.getUserInfo(),e=t.name,r=t.about;$.value=e,G.value=r,rt.hideFormErrors(),rt.toggleButtonState(),Y.open()},at=function(t,e){t.own=e._id===t.owner._id,t.ownLike=!!t.likes.find((function(t){return t.name==e.name}));var r=new i({card:t,handleCardClick:function(t){X.open(t)},handleLikeCard:function(t){r._getOwnLike()?ct.removeLikeCard(t._id).then((function(t){r._showLikeStatus(t.likes,!1)})).catch((function(t){console.log(t)})):ct.addLikeCard(t._id).then((function(t){r._showLikeStatus(t.likes,!0)})).catch((function(t){console.log(t)}))},handleTrashCard:function(t){tt.setHandleSubmit((function(){ct.removeCard(t._id).then((function(){r._trashCard(),tt.close()})).catch((function(t){console.log(t)}))})),tt.open()}},".card-template");return r.generateCard()},ct=new e({url:"https://mesto.nomoreparties.co/v1/cohort-41/",headers:{"content-type":"application/json",authorization:"927f2c34-eed2-41a5-b205-b051cad1964c"}});ct.getAllData().then((function(t){var e,r,o=(r=2,function(t){if(Array.isArray(t))return t}(e=t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i=[],a=!0,c=!1;try{for(r=r.call(t);!(a=(n=r.next()).done)&&(i.push(n.value),!e||i.length!==e);a=!0);}catch(t){c=!0,o=t}finally{try{a||null==r.return||r.return()}finally{if(c)throw o}}return i}}(e,r)||function(t,e){if(t){if("string"==typeof t)return Q(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Q(t,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=o[1];W.setUserInfo(a),W.setAvatar(a.avatar);var c=new n({items:i,renderer:function(t){var e=at(t,a);c.addItem(e)}},".cards");return c.renderItems(),{cardList:c,user:a}})).then((function(t){var e=t.cardList,r=t.user,n=new E(".popup_type_card",(function(t){K(".card-form .form__button-new",F,!0),ct.addCard(t).then((function(t){var o=at(t,r);e.addItem(o),n.close()})).catch((function(t){console.log(t)})).finally((function(){K(".card-form .form__button-new",F,!1)}))}));H.addEventListener("click",(function(){et.hideFormErrors(),et.toggleButtonState(),n.open()})),et.enableValidation(),n.setEventListeners(),Z.setEventListeners(),Y.setEventListeners(),X.setEventListeners(),tt.setEventListeners(),V.addEventListener("click",ot),U.addEventListener("click",it),nt.enableValidation(),rt.enableValidation()})).catch((function(t){console.log(t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,